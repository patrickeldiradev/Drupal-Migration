<?php

/**
* Implementation of hook_migrate_api().
*/
function metu_migrate_migrate_api() {
  
  // We may not need to define this but the tutorials defined such a method, so we did.
  $api = array(
    'api' => 2,
  );
  return $api;
  
}

/**
* Implementation of hook_flush_caches().
*/
function metu_migrate_flush_caches() {

  // Define all migrations in this function
  
  $common_arguments = array(
    'source_version' => 6,
    'source_connection' => 'source'
  );
  
  // We should do Performance->Clear All Caches or "drush cc all" to enable migration options in the Content menu
  metu_migrate_featured_slider($common_arguments);
  metu_migrate_video_content($common_arguments);
  metu_migrate_page($common_arguments);
  metu_migrate_files($common_arguments);
  metu_migrate_users($common_arguments);
  metu_migrate_user_groups_taxonomy($common_arguments);
  metu_migrate_researchers_taxonomy($common_arguments);

}

// Node migrations
function metu_migrate_featured_slider($common_arguments) {

  $args = $common_arguments + array(     
    'description' => 'Migrate featured slider nodes',
    'machine_name' => 'FSMigration', // Call name of this migration through this module
    'source_type' => 'featured_slider',
    'destination_type' => 'featured_slider',
    'user_migration' => 'UserMigration', // Migrate users before migrating the content type
    'dependencies' => array(),
  );
  
  // Call Drupal-to-Drupal Migration module (using overridden class)
  Migration::registerMigration($migration_class="METUFSNodeMigrator", $args['machine_name'], $args);
  
}

function metu_migrate_video_content($common_arguments) {

  $args = $common_arguments + array(
      'description' => 'Migrate video content nodes',
      'machine_name' => 'VCMigration', // Call name of this migration through this module
      'source_type' => 'video_content',
      'destination_type' => 'video',
      'user_migration' => 'UserMigration', // Migrate users before migrating the content type
      'dependencies' => array(),
    );

  // Call Drupal-to-Drupal Migration module (using overridden class)
  Migration::registerMigration($migration_class="METUVCNodeMigrator", $args['machine_name'], $args);

}

function metu_migrate_page($common_arguments) {

  $args = $common_arguments + array(     
    'description' => 'Migrate page nodes',
    'machine_name' => 'PageMigration', // Call name of this migration through this module
    'source_type' => 'page',
    'destination_type' => 'page',
    'user_migration' => 'UserMigration', // Migrate users before migrating the content type
    'dependencies' => array(),
  );
  
  // Call Drupal-to-Drupal Migration module (using overridden class)
  Migration::registerMigration($migration_class="METUPageNodeMigrator", $args['machine_name'], $args);
  
}

function metu_migrate_researchers($common_arguments) {

  $args = $common_arguments + array(
      'description' => 'Migrate researchers nodes',
      'machine_name' => 'ResearchersMigration', // Call name of this migration through this module
      'source_type' => 'interview_anouncements',
      'destination_type' => 'researchers_page',
      'user_migration' => 'UserMigration', // Migrate users before migrating the content type
      'dependencies' => array(),
    );

  // Call Drupal-to-Drupal Migration module (using overridden class)
  Migration::registerMigration($migration_class="METUResearchersNodeMigrator", $args['machine_name'], $args);

}

// File migration
function metu_migrate_files($common_arguments) {

  $args = $common_arguments + array(
    'description' => 'File migration',
    'machine_name' => 'FileMigration',
    'source_dir' => 'http://gercek.metu.edu.tr', // We will retrieve all data using the domain name. It is much more easier.
    'destination_dir' => 'private://', // It is possible to change it to any directory name. It is also possible to use "public://" shortcut
  );
  
  // Call Drupal-to-Drupal Migration module (using overridden class)
  Migration::registerMigration($migration_class="METUFileMigrator", $args['machine_name'], $args);

}

// User migration
function metu_migrate_users($common_arguments) {

  $args = $common_arguments + array(
    'description' => 'User Migration',
    'machine_name' => 'UserMigration',
  );
 
  // Call Drupal-to-Drupal Migration module (using native class)
  Migration::registerMigration($migration_class="DrupalUser6Migration", $args['machine_name'], $args);

}

// Taxonomy migrations
function metu_migrate_user_groups_taxonomy($common_arguments) {

  $args = $common_arguments + array(
      'description' => t('Migration of user groups terms'),
      'machine_name' => 'UGTaxMigration',
      'source_vocabulary' => '5', // vid of the Drupal 6 vocabulary
      'destination_vocabulary' => 'featured_slider',
    );

  // Call Drupal-to-Drupal Migration module (using native class)
  Migration::registerMigration('DrupalTerm6Migration', $args['machine_name'], $args);

}

function metu_migrate_researchers_taxonomy($common_arguments) {

  $args = $common_arguments + array(
      'description' => t('Migration of researchers terms'),
      'machine_name' => 'ResTaxMigration',
      'source_vocabulary' => '7', // vid of the Drupal 6 vocabulary
      'destination_vocabulary' => 'researchers',
    );

  // Call Drupal-to-Drupal Migration module (using native class)
  Migration::registerMigration('DrupalTerm6Migration', $args['machine_name'], $args);

}

// Overriding Node Migration classes
class METUFSNodeMigrator extends DrupalNode6Migration {

  public function __construct(array $arguments) {
    
    // Call parent method
    parent::__construct($arguments);

    // Image Fields
    $this->addFieldMapping('field_standart_image', 'field_image_new')->sourceMigration('FileMigration');
    $this->addFieldMapping('field_standart_image:file_class')->defaultValue('MigrateFileFid');
    $this->addFieldMapping('field_big_image', 'field_big_image_new')->sourceMigration('FileMigration');
    $this->addFieldMapping('field_big_image:file_class')->defaultValue('MigrateFileFid');

    // Forward URI Field
    $this->addFieldMapping('field_forward_uri', 'field_forward_uri');

    // Expire Date Field
    $this->addFieldMapping('field_expire_date', 'field_expire_date');

    // User Groups
    $this->addFieldMapping('field_user_groups', '5')->sourceMigration('UGTaxMigration');

  }

}

class METUVCNodeMigrator extends DrupalNode6Migration {

  public function __construct(array $arguments) {

    // Call parent method
    parent::__construct($arguments);

    // Video Embed Field
    $this->addFieldMapping('field_video_embed', 'field_video_embed');

    // Video Thumbnail Field
    $this->addFieldMapping('field_video_thumbnail', 'field_video_thumbnail')->sourceMigration('FileMigration');
    $this->addFieldMapping('field_video_thumbnail:file_class')->defaultValue('MigrateFileFid');

  }

}

class METUPageNodeMigrator extends DrupalNode6Migration {

  public function __construct(array $arguments) {

    // Call parent method
    parent::__construct($arguments);

    // Extra Fields
    $this->addFieldMapping('field_post_image', 'field_post_image')->sourceMigration('FileMigration');
    $this->addFieldMapping('field_post_image:file_class')->defaultValue('MigrateFileFid');
    $this->addFieldMapping('field_other_images', 'field_other_images')->sourceMigration('FileMigration');
    $this->addFieldMapping('field_other_images:file_class')->defaultValue('MigrateFileFid');
    $this->addFieldMapping('field_post_files', 'field_post_files')->sourceMigration('FileMigration');
    $this->addFieldMapping('field_post_files:file_class')->defaultValue('MigrateFileFid');

  }

}

// Overriding File Migration class
class METUFileMigrator extends DrupalFile6Migration {
  
  public function __construct(array $arguments) {
    parent::__construct($arguments);

    // Due to the structure of the data in our database, we have to use a callback and this is the only way.
    $this->addFieldMapping('destination_file', 'filepath')->callbacks(array($this, 'fixMe'));
    
  }
  
  // Callback method for fixing file paths in the database
  public function fixMe($uri) {
  
    $correctedLegacyPath = 'sites/default/files/';
    $result = str_replace($correctedLegacyPath, '', $uri);
    return $result;
  
  }
  
}
